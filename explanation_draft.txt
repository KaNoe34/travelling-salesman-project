Let the given set of vertices be {1, 2, 3, 4,….n}. 

Let us consider 1 as starting and ending point of output. 

For every other vertex i (other than 1), we find the shortest path with 1 as the starting point, i as the 
ending point and all vertices appearing exactly once. 

Let the cost of this path be cost(i), the cost of 
corresponding Cycle would be cost(i) + dist(i, 1) where dist(i, 1) is the distance from i to 1. 

Finally, we 
return the minimum of all [cost(i) + dist(i, 1)] values. This looks simple so far. Now the question is how to 
get cost(i)?

To calculate cost(i) using Dynamic Programming, we need to have some recursive relation in terms of sub-problems. 

Let us define a term C(S, i) be the weight of the shortest path visiting each vertex in set S exactly once, 
starting at 1 and ending at i.

Now we calculate it.
We start with all subsets of size 2 and calculate C(S, i) for all subsets where S is the subset, then we 
calculate C(S, i) for all subsets S of size 3 and so on. Note that 1 must be present in every subset and that 1
never changes while i does.

If size of S is 2, then S must be {1, i},
 C(S, i) = dist(1, i) 
Else if size of S is greater than 2.
 C(S, i) = min { C(S-{i}, j) + dis(j, i)} where j belongs to S, j != i and j != 1.

For a set of size n, we consider n-2 subsets each of size n-1 such that all subsets don’t have nth in them.

Using the above recurrence relation, we can write dynamic programming based solution. There are at most O(n*2n) 
subproblems, and each one takes linear time to solve. The total running time is therefore O(n2*2n). The time 
complexity is much less than O(n!), but still exponential. Space required is also exponential. So this approach 
is also infeasible even for slightly higher number of vertices.

C({1},1) = 0 
for s = 2 to n: 
    for all subsets S ⊆ {1,2,...,n} of size s and containing 1:         
        C(S,1) = \infty
        for all j\in S,j\neq 1:
            C(S, j) = min\{ C(S-\{j\}, i)+ d_{ij} : i\in S, i\neq j \}
return min_{j} C (\{1,...,n\}, j) + d_{j1}


Consider the shortest distance from the beginning node to itself to be 0 (I'm uncertain why)
C({1},1) = 0                
         
All possible permutations of nodes from size 2 to max size
for s = 2 to n:                      

    all subsets meaning at s = 2, they'd be {1, 2}, {1, 3}, {1, 4} and so on
    and at s = 3 they'd be {1, 2, 3}, {1, 3, 4}, {1, 3, 2}, {1, 4, 3}, {1, 7, 9} etc.
    for all subsets S ⊆ {1,2,...,n} of size s and containing 1:         

	this is because path cannot start and end at 1 if more than one node is involved
        C(S,1) = \infty

	so for every j in S except 1
	so for the first example js would be 2, 3, 4, etc.
	second, 2, 3, 4, 7, 9, etc. and all in-betweens
        for all j\in S,j\neq 1:

	    the shortest distance from 1 to j traversing all in S is the same as the smallest
	    distance from 1 to i traversing all in S excluding j PLUS the distance from i to j
	    oh and i has to be in S and the value where i = j is skipped
            C(S, j) = min\{ C(S-\{j\}, i)+ d_{ij} : i\in S, i\neq j \}

now return whichever C(S, j) + dj1 was shortest, where S included all vertices
return min_{j} C (\{1,...,n\}, j) + d_{j1}
